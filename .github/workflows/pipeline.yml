name: pipeline

on:
  push:
    branches:
      - main
    tags:
      - v*

#set this env variables in project github respository > security > secrets and variables > action > actions variables
env:
  ECR_REPOSITORY: 308698115136.dkr.ecr.ap-southeast-1.amazonaws.com/ci-cd-demo
  ECS_SERVICE: arn:aws:ecs:ap-southeast-1:308698115136:service/CICDDemo/cicd-demo-service
  ECS_CLUSTER: arn:aws:ecs:ap-southeast-1:308698115136:cluster/CICDDemo
  ECS_TASK_DEFINITION: ./.aws/task-definition.json
  CONTAINER_NAME: ci-cd-demo

jobs:
  test:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags')
    steps:
      - uses: actions/checkout@v3
      - name: Run unit test
        run: go test

  build-and-push:
    runs-on: ubuntu-latest
    needs: test
    if: startsWith(github.ref, 'refs/tags')
    outputs:
      image-name: ${{steps.version_step.outputs.version_tag}}
    steps:
      - name: Extract version
        id: version_step
        run: |
          TAG=${{ github.ref_name }}
          echo "version=${TAG#v}" >> $GITHUB_OUTPUT
          echo "version_tag=${{ env.ECR_REPOSITORY }}:${TAG#v}" >> $GITHUB_OUTPUT
          echo "latest_tag=${{ env.ECR_REPOSITORY }}:latest" >> $GITHUB_OUTPUT

      - name: Print version
        run: |
          echo ${{steps.version_step.outputs.version_tag}}
          echo ${{steps.version_step.outputs.latest_tag}}

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to ECR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.ECR_REPOSITORY }}
          username: ${{ secrets.AWS_ACCESS_KEY_ID }}
          password: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

      - name: Prepare registry identifier
        id: read-docker-image-identifiers
        run: |
          echo VERSION_TAG=$(echo ${{ steps.version_step.outputs.version_tag }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV
          echo LASTEST_TAG=$(echo ${{ steps.version_step.outputs.latest_tag  }} | tr '[:upper:]' '[:lower:]') >> $GITHUB_ENV

      - name: Build and push
        id: docker-build
        uses: docker/build-push-action@v4
        with:
          push: true
          tags: |
            ${{env.VERSION_TAG}}
            ${{env.LASTEST_TAG}}
          build-args: |
            ${{steps.version_step.outputs.version}}

  deploy:
    runs-on: ubuntu-latest
    needs: build-and-push
    if: startsWith(github.ref, 'refs/tags')
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: $${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ env.CONTAINER_NAME  }}
          image: ${{ needs.build-and-push.outputs.image-name }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
          wait-for-service-stability: true
